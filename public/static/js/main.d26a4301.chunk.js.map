{"version":3,"sources":["components/ExpenseForm.js","components/Expenses.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseForm","props","state","amount","description","merchant","handleInputChange","bind","handleSubmit","e","name","target","this","setState","value","preventDefault","submitData","newExpense","submitNewExpense","length","className","onSubmit","type","onChange","disabled","validExpense","Component","Expenses","expenses","deleteExpense","map","expense","key","id","href","onClick","App","fetchExpenses","fetch","method","headers","body","JSON","stringify","then","res","json","response","console","log","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uPAuEeA,G,uDAjEb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAEDC,MAAQ,CACXC,OAAQ,EACRC,YAAa,GACbC,SAAU,IAGZ,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVJ,E,8DAaAE,GAChB,IAAMC,EAAOD,EAAEE,OAAOD,KACtBE,KAAKC,SAAL,eACGH,EAAOD,EAAEE,OAAOG,U,mCAIRL,GACXA,EAAEM,eAAeN,GACjBG,KAAKI,e,mCAIL,IAAMC,EAAa,CACjBd,OAAQS,KAAKV,MAAMC,OACnBC,YAAaQ,KAAKV,MAAME,YACxBC,SAAUO,KAAKV,MAAMG,UAGvBO,KAAKX,MAAMiB,iBAAiBD,K,qCAI5B,OAA8B,IAAtBL,KAAKV,MAAMC,QAAgBS,KAAKV,MAAME,YAAYe,OAAS,I,+BAInE,OACE,yBAAKC,UAAU,oBACb,2CACA,0BAAMC,SAAUT,KAAKJ,cACnB,yBAAKY,UAAU,YACb,0CACA,2BAAON,MAAOF,KAAKV,MAAMC,OAAQmB,KAAK,SAASZ,KAAK,SAASa,SAAUX,KAAKN,qBAG9E,yBAAKc,UAAU,YACb,+CACA,2BAAON,MAAOF,KAAKV,MAAME,YAAakB,KAAK,OAAOZ,KAAK,cAAca,SAAUX,KAAKN,qBAGtF,yBAAKc,UAAU,YACb,4CACA,2BAAON,MAAOF,KAAKV,MAAMG,SAAUiB,KAAK,OAAOZ,KAAK,WAAWa,SAAUX,KAAKN,qBAEhF,4BAAQkB,SAAUZ,KAAKa,gBAAvB,qB,GA5DgBC,cCkBXC,MApBf,SAAkB1B,GAChB,OACE,6BACE,0CAMkB2B,EALD3B,EAAM2B,SAKKC,EALK5B,EAAM4B,cAMpCD,EAASE,KAAI,SAACC,GACnB,OACE,yBAAKX,UAAU,cAAcY,IAAKD,EAAQE,IACxC,8BAAM,oCAAUF,EAAQ5B,QAAxB,QAA8C4B,EAAQ3B,aAAe,aACrE,uBAAG8B,KAAK,IAAIC,QAAS,WAAQN,EAAcE,EAAQE,MAAnD,gBALR,IAAwBL,EAAUC,GCwEnBO,E,kDA5Eb,WAAYnC,GAAO,IAAD,8BAChB,cAAMA,IAEDC,MAAQ,CACX0B,SAAU,IAGZ,EAAKS,cAAgB,EAAKA,cAAc9B,KAAnB,gBACrB,EAAKW,iBAAmB,EAAKA,iBAAiBX,KAAtB,gBACxB,EAAKsB,cAAgB,EAAKA,cAActB,KAAnB,gBATL,E,gEAahBK,KAAKyB,kB,+BAIL,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,CACEF,iBAAkBN,KAAKM,mBAEzB,kBAAC,EAAD,CACEU,SAAUhB,KAAKV,MAAM0B,SACrBC,cAAejB,KAAKiB,mB,uCAMXE,GAAS,IAAD,OACvBO,MAAM,mBAAoB,CACxBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUZ,KAEpBa,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZ,EAAKlC,SAAS,CACZe,SAAUmB,EAASnB,cAGtBsB,OAAM,SAACC,GAAYH,QAAQC,IAAI,kCAAmCE,Q,oCAGzDlB,GAAI,IAAD,OACfK,MAAM,oBAAD,OAAqBL,GAAM,CAC9BM,OAAQ,WAEPK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZ,EAAKlC,SAAS,CACZe,SAAUmB,EAASnB,cAGtBsB,OAAM,SAACC,GAAYH,QAAQC,IAAI,kCAAmCE,Q,sCAGtD,IAAD,OACdb,MAAM,oBACHM,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,EAAKlC,SAAS,CACZe,SAAUmB,EAASnB,cAGtBsB,OAAM,SAACC,GAAYH,QAAQC,IAAI,kCAAmCE,U,GAxEvDzB,aCOE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdhB,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMgB,a","file":"static/js/main.d26a4301.chunk.js","sourcesContent":["import '../assets/stylesheets/App.scss';\n\nimport React, { Component } from 'react';\n\nclass ExpenseForm extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      amount: 0,\n      description: \"\",\n      merchant: \"\",\n    }\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleInputChange(e){\n    const name = e.target.name;\n    this.setState({\n      [name]: e.target.value\n    });\n  }\n\n  handleSubmit(e){\n    e.preventDefault(e);\n    this.submitData();\n  }\n\n  submitData(){\n    const newExpense = {\n      amount: this.state.amount,\n      description: this.state.description,\n      merchant: this.state.merchant,\n    }\n\n    this.props.submitNewExpense(newExpense);\n  }\n\n  validExpense(){\n    return (this.state.amount === 0 || this.state.description.length < 2);\n  }\n\n  render(){\n    return (\n      <div className=\"new-expense-form\">\n        <h3>New Expense</h3>\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"oneInput\">\n            <label>Amount:</label>\n            <input value={this.state.amount} type='number' name='amount' onChange={this.handleInputChange}></input>\n          </div>\n\n          <div className=\"oneInput\">\n            <label>Description:</label>\n            <input value={this.state.description} type='text' name='description' onChange={this.handleInputChange}></input>\n          </div>\n\n          <div className=\"oneInput\">\n            <label>Merchant:</label>\n            <input value={this.state.merchant} type='text' name='merchant' onChange={this.handleInputChange}></input>\n          </div>\n          <button disabled={this.validExpense()}>Add Expense</button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default ExpenseForm;\n","import React from 'react';\n\nfunction Expenses(props){\n  return (\n    <div>\n      <h3>Expenses:</h3>\n      { renderExpenses(props.expenses, props.deleteExpense) }\n    </div>\n  )\n}\n\nfunction renderExpenses(expenses, deleteExpense){\n  return expenses.map((expense) => {\n    return (\n      <div className=\"one-expense\" key={expense.id}>\n        <span><strong>${expense.amount}</strong> for {expense.description || \"Undefined\"}</span>\n        <a href=\"#\" onClick={() => { deleteExpense(expense.id)}}>delete</a>\n      </div>\n    )\n  })\n}\n\nexport default Expenses;\n","import React, { Component } from 'react';\nimport ExpenseForm from './components/ExpenseForm'\nimport Expenses from './components/Expenses'\nimport './assets/stylesheets/App.scss';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      expenses: []\n    }\n\n    this.fetchExpenses = this.fetchExpenses.bind(this);\n    this.submitNewExpense = this.submitNewExpense.bind(this);\n    this.deleteExpense = this.deleteExpense.bind(this);\n  }\n\n  componentDidMount(){\n    this.fetchExpenses();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ExpenseForm \n          submitNewExpense={this.submitNewExpense}\n        />\n        <Expenses \n          expenses={this.state.expenses} \n          deleteExpense={this.deleteExpense}\n        />\n      </div>\n    );\n  }\n  \n  submitNewExpense(expense){\n    fetch('/api/v1/expenses', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(expense),\n    })\n      .then(res => res.json())\n      .then((response) => { \n        console.log(response);\n        this.setState({\n          expenses: response.expenses,\n        })\n      })\n      .catch((error) => { console.log(\"Error while fetching test datas\", error); })\n  }\n\n  deleteExpense(id){\n    fetch(`/api/v1/expenses/${id}`, {\n      method: 'DELETE',\n    })\n      .then(res => res.json())\n      .then((response) => { \n        console.log(response);\n        this.setState({\n          expenses: response.expenses,\n        })\n      })\n      .catch((error) => { console.log(\"Error while fetching test datas\", error); })\n  }\n\n  fetchExpenses() {\n    fetch('/api/v1/expenses')\n      .then(res => res.json())\n      .then((response) => { \n        this.setState({\n          expenses: response.expenses,\n        })\n      })\n      .catch((error) => { console.log(\"Error while fetching test datas\", error); })\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}